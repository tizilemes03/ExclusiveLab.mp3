{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "dccd1853-c7b0-48f5-9c7d-1f846cfbf4f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "La biblioteca de pandas nos provee de:\n",
    "Series: un vector unidimensional indexado, que contiene datos de cualquier tipo como números enteros, cadenas, objetos Python, etc.\n",
    "DataFrame: una estructura de datos bidimensional que contiene datos como una matriz bidimensional o una tabla con filas y columnas. (muy interesante)\"\"\"\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import seaborn.objects as so\n",
    "#obj = pd.Series([7,4,-5,3])\n",
    "#obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a4681f63-e494-4bed-9777-1ce0e04bcef3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<PandasArray>\n",
       "[7, 4, -5, 3]\n",
       "Length: 4, dtype: int64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#puedo pasar de series a array, el cual tiene una longitud delimitada y las propiedades de un array\n",
    "A = obj.array\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f9acc746-3720-45e5-a037-423e1f2ddc1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=4, step=1)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "865e5ff7-5c67-4c15-9584-bfcf6af807e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "d    2\n",
       "a    4\n",
       "b    6\n",
       "c    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Forma de etiquetar a nuestro gusto cada indice del vector series\"\"\"\n",
    "obj2 = pd.Series([2,4,6,1] , index = [\"d\",\"a\",\"b\",\"c\"])\n",
    "obj2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3a474bc0-ae3e-4d4c-a66f-b979acaf0d08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "d    2\n",
       "a    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#obj2[\"b\"]\n",
    "#obj2[0]\n",
    "#obj2[0:2] recordar que es excluyente el ultimo indice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "36f43fd7-030f-4f2f-b02f-3858be103aac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'si sumo una serie con otra de diferentes indices, me devuelve NaN'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#NaN significa \"not a number\", se utiliza en series de Pandas para valores faltantes (missing values).\n",
    "\"\"\"si sumo una serie con otra de diferentes indices, me devuelve NaN\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0d9b9153-9e74-4026-927e-79ea4732bf2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1     True\n",
       "2     True\n",
       "3     True\n",
       "4    False\n",
       "5     True\n",
       "6    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#MUY UTIL EL ISIN PARA VER LO QUE PERTENECE A UNA SERIE O NO (UTIL PARA DICCIONARIOS)\n",
    "series1 = pd.Series([\"a\", \"b\", \"c\", \"b\", \"a\", \"c\", \"x\"])\n",
    "series1.isin([\"b\", \"c\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "97f8b327-6393-408b-85be-233a54e78973",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    2\n",
       "b    2\n",
       "c    2\n",
       "x    1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series1.value_counts()\n",
    "#Cuantas veces aparecen los valores en la serie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "428748d4-b552-4ad8-9e5a-44572562f6b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'DATAFRAMES'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"DATAFRAMES\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "114d8353-2784-47ff-b2a8-a1c095df6e7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Canción</th>\n",
       "      <th>Streams</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Artistas</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ariana</th>\n",
       "      <td>yes,and?</td>\n",
       "      <td>3800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nicki Nicole</th>\n",
       "      <td>Me Gusta</td>\n",
       "      <td>1500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Emilia</th>\n",
       "      <td>jagger.mp3</td>\n",
       "      <td>870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LINDA Tatiana</th>\n",
       "      <td>TU Turraka</td>\n",
       "      <td>740000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>La Babydoll</th>\n",
       "      <td>No Te Arrepientas</td>\n",
       "      <td>650000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Onika</th>\n",
       "      <td>Burguers</td>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Canción  Streams\n",
       "Artistas                                 \n",
       "Ariana                  yes,and?  3800000\n",
       "Nicki Nicole            Me Gusta  1500000\n",
       "Emilia                jagger.mp3   870000\n",
       "LINDA Tatiana         TU Turraka   740000\n",
       "La Babydoll    No Te Arrepientas   650000\n",
       "Onika                   Burguers     1500"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataPop = {\"Artistas\" : [\"Ariana\", \"Nicki Nicole\", \"Emilia\", \"LINDA Tatiana\", \"La Babydoll\", \"Onika\"], \"Canción\" : [\"yes,and?\",\"Me Gusta\",\"jagger.mp3\",\"TU Turraka\", \"No Te Arrepientas\", \"Burguers\"],\n",
    "           \"Streams\" : np.array([3800000,1500000,870000,740000,650000,1500])}\n",
    "#display(dataPop)\n",
    "#streamSanvicentino = pd.DataFrame(dataPop)\n",
    "streamSanvicentino = pd.DataFrame(dataPop).set_index(\"Artistas\")\n",
    "display(streamSanvicentino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6a7c2fe-2124-41b6-9bc1-159a2ef16325",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Artistas\n",
       "Ariana                    yes,and?\n",
       "Nicki Nicole              Me Gusta\n",
       "Emilia                  jagger.mp3\n",
       "LINDA Tatiana           TU Turraka\n",
       "La Babydoll      No Te Arrepientas\n",
       "Onika                     Burguers\n",
       "Name: Canción, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "canciones = streamSanvicentino[\"Canción\"] #dos formas de acceder a la columna de información\n",
    "canciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8fdec0e7-1dbd-43d7-80ae-b6f3118337de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Artistas\n",
       "Ariana                    yes,and?\n",
       "Nicki Nicole              Me Gusta\n",
       "Emilia                  jagger.mp3\n",
       "LINDA Tatiana           TU Turraka\n",
       "La Babydoll      No Te Arrepientas\n",
       "Onika                     Burguers\n",
       "Name: Canción, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino.Canción"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8f5a860f-9c19-4357-8e16-d42cd966878a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'yes,and?'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino[\"Canción\"].Ariana #primero accedemos a la columna con [], y luego buscamos el valor que tiene asignado Ariana en canciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ac6bb1f9-1f53-43bf-a0b6-8aed9ccbc85a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'los metodos loc[] e iloc[] nos ayudan a acceder a las filas de un dataframe, el primero accede\\nutilizando los index de las series utilizada y el segundo segun el numero de posición que tiene asignado por series array'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"los metodos loc[] e iloc[] nos ayudan a acceder a las filas de un dataframe, el primero accede\n",
    "utilizando los index de las series utilizada y el segundo segun el numero de posición que tiene asignado por series array\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7545fb47-6184-4980-9891-c21be5f09aff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Canción    yes,and?\n",
       "Streams     3800000\n",
       "Name: Ariana, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino.loc[\"Ariana\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9ca5f88e-d25b-4b88-aa60-a2f4b34a65d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Canción</th>\n",
       "      <th>Streams</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Artistas</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Ariana</th>\n",
       "      <td>yes,and?</td>\n",
       "      <td>3800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nicki Nicole</th>\n",
       "      <td>Me Gusta</td>\n",
       "      <td>1500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Canción  Streams\n",
       "Artistas                       \n",
       "Ariana        yes,and?  3800000\n",
       "Nicki Nicole  Me Gusta  1500000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino.iloc[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7cc5bf64-9dc4-46bb-bbb3-5f6147db9a9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['yes,and?', 'Me Gusta', 'jagger.mp3', 'TU Turraka',\n",
       "       'No Te Arrepientas', 'Burguers'], dtype=object)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino[\"Canción\"].unique() #columna array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3e753421-fa62-4fba-942d-16a3011369d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cuantas canciones hay? ->\n",
    "streamSanvicentino[\"Canción\"].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f109f350-3987-4a15-b381-cf9bda8591c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Artistas\n",
       "Ariana           1\n",
       "Emilia           1\n",
       "LINDA Tatiana    1\n",
       "La Babydoll      1\n",
       "Nicki Nicole     1\n",
       "Onika            1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "streamSanvicentino.groupby(\"Artistas\").size()\n",
    "#nos marca cuantas veces aparece algun artistas para una categoria, por ejemplo paises que pertenecen a un mismo continente\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b798ea04-0ab3-4a21-bf47-b60b9ab328c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gapminder import gapminder\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "38ebb1e5-3e82-46f2-b54d-2ff1068cfb72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th>lifeExp</th>\n",
       "      <th>pop</th>\n",
       "      <th>gdpPercap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1952</td>\n",
       "      <td>28.801</td>\n",
       "      <td>8425333</td>\n",
       "      <td>779.445314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1957</td>\n",
       "      <td>30.332</td>\n",
       "      <td>9240934</td>\n",
       "      <td>820.853030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1962</td>\n",
       "      <td>31.997</td>\n",
       "      <td>10267083</td>\n",
       "      <td>853.100710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1967</td>\n",
       "      <td>34.020</td>\n",
       "      <td>11537966</td>\n",
       "      <td>836.197138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1972</td>\n",
       "      <td>36.088</td>\n",
       "      <td>13079460</td>\n",
       "      <td>739.981106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       country continent  year  lifeExp       pop   gdpPercap\n",
       "0  Afghanistan      Asia  1952   28.801   8425333  779.445314\n",
       "1  Afghanistan      Asia  1957   30.332   9240934  820.853030\n",
       "2  Afghanistan      Asia  1962   31.997  10267083  853.100710\n",
       "3  Afghanistan      Asia  1967   34.020  11537966  836.197138\n",
       "4  Afghanistan      Asia  1972   36.088  13079460  739.981106"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gapminder.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c497b7fc-d367-428f-be07-a2b8ddaa957c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "continent\n",
       "Africa      52\n",
       "Americas    25\n",
       "Asia        33\n",
       "Europe      30\n",
       "Oceania      2\n",
       "Name: country, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gapminder.groupby(\"continent\")[\"country\"].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c62c31f8-9187-4d28-ae37-d7c94188c594",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1704 entries, 0 to 1703\n",
      "Data columns (total 6 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   country    1704 non-null   object \n",
      " 1   continent  1704 non-null   object \n",
      " 2   year       1704 non-null   int64  \n",
      " 3   lifeExp    1704 non-null   float64\n",
      " 4   pop        1704 non-null   int64  \n",
      " 5   gdpPercap  1704 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(2)\n",
      "memory usage: 80.0+ KB\n"
     ]
    }
   ],
   "source": [
    "gapminder.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b93f625d-63cd-4a01-beb7-90f61b3af82e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1704, 6)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gapminder.shape\n",
    "#cuantas filas y columnas tiene esta matriz!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1ca7f827-0a8b-4916-9d71-0def41ba347c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year\n",
       "1952    142\n",
       "1957    142\n",
       "1962    142\n",
       "1967    142\n",
       "1972    142\n",
       "1977    142\n",
       "1982    142\n",
       "1987    142\n",
       "1992    142\n",
       "1997    142\n",
       "2002    142\n",
       "2007    142\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tenemos datos de todos los países todos los años?\n",
    "# Agrupamos los datos por año y calculamos el tamaño de cada bloque\n",
    "gapminder.groupby(\"year\").size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5c5d5af7-baaf-4bdc-a153-87a7c25523ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "continent\n",
       "Africa      0.366197\n",
       "Americas    0.176056\n",
       "Asia        0.232394\n",
       "Europe      0.211268\n",
       "Oceania     0.014085\n",
       "Name: country, dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"cantidad de valores distintos que tienen las columnas\"\n",
    "gapminder[\"country\"].nunique()\n",
    "# Para contar sin repeticion usamos nuevamente nunique\n",
    "gapminder.groupby(\"continent\")[\"country\"].nunique()\n",
    "# Si queremos calcular porcentajes, dividimos por la cantidad total de paises\n",
    "totalPaises = gapminder[\"country\"].nunique()\n",
    "gapminder.groupby(\"continent\")[\"country\"].nunique() / totalPaises"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c980ce31-9a49-4cf0-bbc3-67e381c6934d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th>lifeExp</th>\n",
       "      <th>pop</th>\n",
       "      <th>gdpPercap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1952</td>\n",
       "      <td>62.485</td>\n",
       "      <td>17876956</td>\n",
       "      <td>5911.315053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1957</td>\n",
       "      <td>64.399</td>\n",
       "      <td>19610538</td>\n",
       "      <td>6856.856212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1962</td>\n",
       "      <td>65.142</td>\n",
       "      <td>21283783</td>\n",
       "      <td>7133.166023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1967</td>\n",
       "      <td>65.634</td>\n",
       "      <td>22934225</td>\n",
       "      <td>8052.953021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1972</td>\n",
       "      <td>67.065</td>\n",
       "      <td>24779799</td>\n",
       "      <td>9443.038526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1977</td>\n",
       "      <td>68.481</td>\n",
       "      <td>26983828</td>\n",
       "      <td>10079.026740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1982</td>\n",
       "      <td>69.942</td>\n",
       "      <td>29341374</td>\n",
       "      <td>8997.897412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1987</td>\n",
       "      <td>70.774</td>\n",
       "      <td>31620918</td>\n",
       "      <td>9139.671389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1992</td>\n",
       "      <td>71.868</td>\n",
       "      <td>33958947</td>\n",
       "      <td>9308.418710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1997</td>\n",
       "      <td>73.275</td>\n",
       "      <td>36203463</td>\n",
       "      <td>10967.281950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>2002</td>\n",
       "      <td>74.340</td>\n",
       "      <td>38331121</td>\n",
       "      <td>8797.640716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>2007</td>\n",
       "      <td>75.320</td>\n",
       "      <td>40301927</td>\n",
       "      <td>12779.379640</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      country continent  year  lifeExp       pop     gdpPercap\n",
       "48  Argentina  Americas  1952   62.485  17876956   5911.315053\n",
       "49  Argentina  Americas  1957   64.399  19610538   6856.856212\n",
       "50  Argentina  Americas  1962   65.142  21283783   7133.166023\n",
       "51  Argentina  Americas  1967   65.634  22934225   8052.953021\n",
       "52  Argentina  Americas  1972   67.065  24779799   9443.038526\n",
       "53  Argentina  Americas  1977   68.481  26983828  10079.026740\n",
       "54  Argentina  Americas  1982   69.942  29341374   8997.897412\n",
       "55  Argentina  Americas  1987   70.774  31620918   9139.671389\n",
       "56  Argentina  Americas  1992   71.868  33958947   9308.418710\n",
       "57  Argentina  Americas  1997   73.275  36203463  10967.281950\n",
       "58  Argentina  Americas  2002   74.340  38331121   8797.640716\n",
       "59  Argentina  Americas  2007   75.320  40301927  12779.379640"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\ngapminder[\"country\"].isin([\"Argentina\"])) ME LOCALIZA EN QUE FILAS DE COUNTRY SE HALLA ARGENTINA, DE FORMA QUE AL UTILIZAR\\nCOMO INDICE ESTA SERIE, ME DEVOLVERA LAS FILAS QUE TIENEN A ARGENTINA EN LA COLUMNA COUNTRY'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#punto 13 pedir data especifica de ciertas filas\n",
    "#gm_sur es un dataframe que extrajo los datos de argentina, chile y uruguay en cada columna!\n",
    "gm_sur = gapminder[gapminder[\"country\"].isin([\"Argentina\",\"Chile\",\"Uruguay\"])]\n",
    "gm_arg = gapminder[gapminder[\"country\"].isin([\"Argentina\"])]\n",
    "display(gm_arg)\n",
    "#display(gm_sur)\n",
    "\"\"\"\n",
    "gapminder[\"country\"].isin([\"Argentina\"])) ME LOCALIZA EN QUE FILAS DE COUNTRY SE HALLA ARGENTINA, DE FORMA QUE AL UTILIZAR\n",
    "COMO INDICE ESTA SERIE, ME DEVOLVERA LAS FILAS QUE TIENEN A ARGENTINA EN LA COLUMNA COUNTRY\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f78c86e7-ee04-4c78-ae55-cdee7ec606d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th>lifeExp</th>\n",
       "      <th>pop</th>\n",
       "      <th>gdpPercap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1952</td>\n",
       "      <td>62.485</td>\n",
       "      <td>17876956</td>\n",
       "      <td>5911.315053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1957</td>\n",
       "      <td>64.399</td>\n",
       "      <td>19610538</td>\n",
       "      <td>6856.856212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1962</td>\n",
       "      <td>65.142</td>\n",
       "      <td>21283783</td>\n",
       "      <td>7133.166023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1967</td>\n",
       "      <td>65.634</td>\n",
       "      <td>22934225</td>\n",
       "      <td>8052.953021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1972</td>\n",
       "      <td>67.065</td>\n",
       "      <td>24779799</td>\n",
       "      <td>9443.038526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1977</td>\n",
       "      <td>68.481</td>\n",
       "      <td>26983828</td>\n",
       "      <td>10079.026740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1982</td>\n",
       "      <td>69.942</td>\n",
       "      <td>29341374</td>\n",
       "      <td>8997.897412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1987</td>\n",
       "      <td>70.774</td>\n",
       "      <td>31620918</td>\n",
       "      <td>9139.671389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1992</td>\n",
       "      <td>71.868</td>\n",
       "      <td>33958947</td>\n",
       "      <td>9308.418710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>1997</td>\n",
       "      <td>73.275</td>\n",
       "      <td>36203463</td>\n",
       "      <td>10967.281950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>2002</td>\n",
       "      <td>74.340</td>\n",
       "      <td>38331121</td>\n",
       "      <td>8797.640716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>Americas</td>\n",
       "      <td>2007</td>\n",
       "      <td>75.320</td>\n",
       "      <td>40301927</td>\n",
       "      <td>12779.379640</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      country continent  year  lifeExp       pop     gdpPercap\n",
       "48  Argentina  Americas  1952   62.485  17876956   5911.315053\n",
       "49  Argentina  Americas  1957   64.399  19610538   6856.856212\n",
       "50  Argentina  Americas  1962   65.142  21283783   7133.166023\n",
       "51  Argentina  Americas  1967   65.634  22934225   8052.953021\n",
       "52  Argentina  Americas  1972   67.065  24779799   9443.038526\n",
       "53  Argentina  Americas  1977   68.481  26983828  10079.026740\n",
       "54  Argentina  Americas  1982   69.942  29341374   8997.897412\n",
       "55  Argentina  Americas  1987   70.774  31620918   9139.671389\n",
       "56  Argentina  Americas  1992   71.868  33958947   9308.418710\n",
       "57  Argentina  Americas  1997   73.275  36203463  10967.281950\n",
       "58  Argentina  Americas  2002   74.340  38331121   8797.640716\n",
       "59  Argentina  Americas  2007   75.320  40301927  12779.379640"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Primer año de Argentina = 1952\n",
    "Ultimo año de Argentina = 2007 \n",
    "\"\"\"\n",
    "Arg = gm_sur.iloc[0:12]\n",
    "display(Arg)\n",
    "#no se que onda con loc! xd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "55b277e1-854f-45e6-943a-3c94b91455f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv(\"C:/Users/Pepinaldo/Downloads/casos_coronavirus.csv\") # DataFrame\n",
    "#df.head()  # Primeras filas del DataFrameimport pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b9267921-e89f-4803-800f-8ad3bcee1a03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"confirmados_Nuevos\"].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "29b8837e-48cf-456a-9489-3a34ee1c3a6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x261df4fe6a0>]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "casosDiaF = df[\"fecha\"]\n",
    "#display(casosDiaF)\n",
    "casosDiaN = df[\"confirmados_Nuevos\"]\n",
    "#casosDiaN\n",
    "plt.plot(casosDiaF,casosDiaN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e801ba52-6205-439d-99eb-9141d07a6eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#arrayCasosAcumu = df[\"confirmados_Nuevos\"].unique()\n",
    "#casosAcumu = arrayCasosAcumu.cumsum()\n",
    "#dias = casosDiaF.unique()\n",
    "#display(dias)\n",
    "#plt.plot(casosAcumu)\n",
    "#casos_acumulados = df[\"confirmados_Nuevos\"].cumsum()\n",
    "#casos_acumulados.plot()\n",
    "casos_acumulados = df[\"confirmados_Nuevos\"].cumsum()\n",
    "dias_transcurridos = df[\"fecha\"].unique()\n",
    "y = casos_acumulados\n",
    "x = dias_transcurridos\n",
    "plt.plot(x,y)\n",
    "plt.yscale(\"log\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a11282e9-5618-427a-a260-508c57dbb37d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th>lifeExp</th>\n",
       "      <th>pop</th>\n",
       "      <th>gdpPercap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1952</td>\n",
       "      <td>28.801</td>\n",
       "      <td>8425333</td>\n",
       "      <td>779.445314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1957</td>\n",
       "      <td>30.332</td>\n",
       "      <td>9240934</td>\n",
       "      <td>820.853030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1962</td>\n",
       "      <td>31.997</td>\n",
       "      <td>10267083</td>\n",
       "      <td>853.100710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1967</td>\n",
       "      <td>34.020</td>\n",
       "      <td>11537966</td>\n",
       "      <td>836.197138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1972</td>\n",
       "      <td>36.088</td>\n",
       "      <td>13079460</td>\n",
       "      <td>739.981106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       country continent  year  lifeExp       pop   gdpPercap\n",
       "0  Afghanistan      Asia  1952   28.801   8425333  779.445314\n",
       "1  Afghanistan      Asia  1957   30.332   9240934  820.853030\n",
       "2  Afghanistan      Asia  1962   31.997  10267083  853.100710\n",
       "3  Afghanistan      Asia  1967   34.020  11537966  836.197138\n",
       "4  Afghanistan      Asia  1972   36.088  13079460  739.981106"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gapminder.head()\n",
    "\"\"\"De este dataframe, tenemos las variables categoricas pais y continentes\n",
    "luego las numericas: año, expectativa de vida, poblacion y pbi percapita\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "9ad8041f-fbcf-46c2-bf9c-6490bf053c07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Africa</th>\n",
       "      <th>Americas</th>\n",
       "      <th>Asia</th>\n",
       "      <th>Europe</th>\n",
       "      <th>Oceania</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gpdAlto</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>27</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Africa  Americas  Asia  Europe  Oceania\n",
       "gpdAlto                                         \n",
       "1            19        24    27      30        2\n",
       "0            33         1     6       0        0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"el pbi seria una variable numerica continua, y la población por ejemplo sería una variable numerica discreta\"\"\"\n",
    "\n",
    "\"\"\"Filtrar el DataFrame de gapminder para el a˜no 2007. Luego, para ese a˜no, calcular la cantidad\n",
    "de paıses en cada continente. Explorar la funci´on groupBy() y los m´etodos size() y nunique()\n",
    "de un DataFrame agrupado\"\"\"\n",
    "datos2007 = gapminder[gapminder[\"year\"].isin([2007])] \n",
    "#display(datos2007)\n",
    "#accedemos a la serie panda en la cual me marca true si en una fila de la columna año\n",
    "#esta el 2007 y luego accedemos al dataframe cuando esos valores son true.\n",
    "#display(gapminder[\"country\"].nunique())\n",
    "datos2007.groupby(\"continent\").size()\n",
    "\"\"\"como podemos ver, al hablarnos de un solo año no hay repetidos, por lo que efectivamente hay 142 paises!\"\"\"\n",
    "datos2007clase = gapminder[gapminder[\"year\"]==2007]\n",
    "#datos2007clase\n",
    "\n",
    "\n",
    "gpdAlto1 = datos2007[datos2007[\"gdpPercap\"]>=2000]\n",
    "gpdAlto1.groupby(\"continent\")[\"country\"].size()\n",
    "gpdAlto0 = datos2007[datos2007[\"gdpPercap\"]<2000]\n",
    "gpdAlto0.groupby(\"continent\")[\"country\"].size()\n",
    "\n",
    "\n",
    "datosgdp = { \"gpdAlto\": [1,0], \"Africa\" : [19,33] , \"Americas\" : [24,1], \"Asia\" : [27,6] , \"Europe\" : [30,0], \"Oceania\" : [2,0]}\n",
    "gpdAlto_1_0 = pd.DataFrame(datosgdp).set_index(\"gpdAlto\")\n",
    "\n",
    "gpdAlto_1_0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "68f889bc-00c4-477f-aa49-4a05f2302aed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'medianaVector() = if vector.len() mod 2 = 0 then (vector[vector.len()-2/2] + vector[vector.len()-2/2 + 1] /2)\\nelse vector[vector.len()-1/2]'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#mediaVector() = vector.sum()/vector.len()\n",
    "\"\"\"medianaVector() = if vector.len() mod 2 = 0 then (vector[vector.len()-2/2] + vector[vector.len()-2/2 + 1] /2)\n",
    "else vector[vector.len()-1/2]\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "835a0b35-f514-466f-847a-d43067003e54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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G7VNmTJF48eP14YNG7Rjxw599tlnGjx4sBISElSuXDlNmjTJGHf+/Hnjulq1ark+IzAw0LgOCwvLco/0YDgnlStXNrZ6yPjcwtQQERGRaTUwAAAAgOLT/JaWslgthR5ftoKvajbOfcEGAABm4nQ69eyzY40tTHMTEhKi22/vqueee1pbtmxWRES4kpOTderUSc2dO0c33dRRn332aa73uHjxgu6443aNGTNKv/yyQefPn1dKSorOnTun779fpj59emjKlPdyHB8bG6sBA/rqmWfGaOvW3xUTE63ExEQdP35MM2fOUNeunbRy5YoCfx1yY8+7y5ULCAhQbGxspgAxXa1atXTq1KlsV3v6+qb99Dg6OrrYaywIX19fffnll5o2bZoWLFigpUuXaunSpZn63HLLLZowYYKxt60kRUVFGddly+Z+Umx68C1lfv/p13mNt1qtKlOmjBISEjKNL2wNMTExqlixYq79i0O5cl55d5Jk+/+PnNlsVvn7+xRnSUCBMDdhVsxNmBnzE2blrrnZpV9H/bJgnVKdqQUea7VZ1aX/japYkZW41xr+7ARwtXK5XHruuaf04495h57p4enRo0ckSU2bNtMTT4xVgwbXKzj4rD777FNt3vybXnxxnBITkzRmzFNZ7pGYmKj+/e/UoUNpW57efnt3Pfjgw6pSJVC7d+/Uhx9O1oULF/TOO2/quuvq6+67B2a5x5gxo7Rx46+SpD597tSIEQ+pXLny+v33zfrwwymKjY3RyJEPac2aDWrWrPmVfHkMbglxmzdvrlOnTumXX37R8OHDM7XVrl1bGzdu1L59+7KMO3v2rKS0jfnN5vDhwzpy5IhSUlKybd+7d69Wr16tkSNHGiuQM65mzW0rBEny8vonvMw4Lv06r/HpfRISErIdfyU1uJO9gHt5WSyWAo8B3IG5CbNibsLMmJ8wq+Kem37ly6pjnw7a8v3vcjqdBarLZrepU58O/LdzDePPTgBXk5iYGD355ONaseL7fPX/8MPJRoDbo0dPzZ27UJ6enpKktm3bqW/fuzR27Gh99dUCvfPOJN15Z1/VqZN5e9f//OcDI8AdNepJvfPOPytu27Vrrx49eurmmzsrNjZWb745Uf37D8iUTa5fv07ff79MkvTww49qypT/GG0dOnRU9+53qFev7oqNjdFrr03Q0qVFsyLXLSFu165dtWLF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SD333FO6664++uuvo5Kk4cMf1MCBg3Ids2/fH4qKipQkDR58n8qVK59tP29vb911192SpJUrVyglJcVoCw+/JJcr7Xu/evWuy3a8xWJRw4ZpC0rPnw/L1BYbG6tff/1ZktSrV+8caxg6dLhxnb5q90q5JcS9++67VatWLblcLr311lt6++239ddff2XZPDg5OVm///67HnzwQX311VeyWCwKDAzUgAED3FEmAAAAriEnN++XxVq4LRFSE5MVuu94EVcEAACuNU6HUwcXb9Rv73+tU5v2KTUxc1aWmpisU5v26bf3v9bBxRtLzcrcnTt3SJICAwP1xRfz9NFH02S3577r65kzp43r1q1b59r3+usbSkoLXf/885DxepUqgcaWWH///VeO40+cSPs+r2rVzPvh7t69U6mpaT/I79y5S47jq1WrZqzm/e23jbnWml9uCXHtdrs++eQT+fr6yul0av78+erXr5/GjRtn9OnSpYtat26thx9+WNu2bZPL5ZKHh4c+/PDDLEujAQAAgCuREBGji0fPFmoVriTJkhYCAwAAFJbT4dSeOasUvDNtj9ecvi9Jfz145xHtmbOqVAS5FStW0ksvvawdO/4wVs3mJSXln4Db19cv174ZA+Hjx48Z197e3ura9RZJ0tq1q7V9+7YsY7/55mtjhfCdd/bL1Ja+H68k1atXL9ca0vfizTjmSrjlYDNJatiwoRYuXKinn35aJ06cMF5PT78vXfpnObMkVa5cWVOnTs0zWQcAAAAKKvZ85JXdwFUE9wAAANe0P5f9pkt/h0iufP5Q2eXSpb9D9Oey39R0YNfiLa6YLV68PM89cC8XEFDJuA4NDcm1b3DwWeP68i0R3nrr3+rXr7ciIsI1YEBfPfnkU+rc+UalpKRq3bq1mj17piSpWbPmGjfuhUxjz50LNa5r1KiZaw1BQUGS0jLP5OTkK16k6rYQV5Kuv/56rVixQj/++KNWrlyp3bt3Kzr6nz09ypQpoxYtWqhHjx6655575O3t7c7yAAAAcI1ITUrJu1MeHMnsiQsAAAonPjxawTsOF3ygy6XgHYdV79ZW8g7IfTWqmRU0wJWkVq1ayWq1yul0asWKH/Tgg4/k2Penn9Ya1/Hx8ZnamjZtptWr12nSpNf1448rNHnyu5naLRaLxox5Ws8//2KWPW8jIyONa19f31zr9fHxMa6j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RW3CyqhPWBW1CSujPmEFhLjIizVrVql791slSWPGvK5HH/2Pz35//vmHbr65kyRp+PDnNHLkS/87fkJffjlZdrtdf/yxWXXr1ssy9rvvZunhhwdJkqZPn6WuXW8z2zZs+FNdumSutn3++Rf1/PMvZhkfHx+va665UrGxp3X77d309dczvdpbtWqmf/7ZrXr16mv9+k1ZQmJJeuKJxzR16hT5+flp5869Kl++Qq4/G08lsp2ClBnMuv8798/n/pdbu2c/AAAAAAAA4GKQnp6u0ydiFXXouE6fiFV6enpJT6nIrVv3u3l88823ZNvv2mtbqnTpzA8Fdu7823z8hx8WS5JatmzlM8CVpDvu6GnuZbto0QKvtu+//3eb1969+/gcX6ZMGXXr1l2StGLFciUl/fvh2O7du/TPP7slST173uUzwJWk++7rJynz7/THH3/I5lnmnV/uXQrv66+/Lo7LAAAAAAAAABecE1EntXLhKv286FclJfx7o63gkCB17NZBnbq3V6WqFUtwhkXn2mtb6sknhysq6piqV6+RbT/PRZwpKZk3PztwYL+io6MlSW3aXJ/tWH9/fzVv3kKrV6/S6tWrvNr++GOdJKlateqqU6dutue47ro2+vrrKUpOTtaGDX+offsb/jd+vdmnbdvs59CsWXOVKlVKqampWrNmlfr2vT/bvnlRLCFuy5Yti+MyAAAAAAAAwAUjPT1dX38wU78sXi273ZZlS8mkhGQt+XaZvp+5RDfc3k79n+wjP79iifPOmw4dOpo3D8vJli2bzRWw1atnbn2xe/cus91987Ps1KlTT6tXr9LRo0eUmJhorup1n6NePd+reP8d/2/Au3v3LjPEzesc/P39Vb16De3bt9drTEFd2H/rJWTEiBGaN29evsft2pX1L+z333/X1KlTtWXLFsXFxalChQq65pprdP/996tFixa5njMmJkaTJ0/WL7/8omPHjikoKEh169ZVt27d1Lt3b/n7++c43ul0as6cOZo3b5527dolh8OhKlWqqH379howYIBq1qyZ7+cJAAAAAACAnKWnp+u9EeMUuSnzfk/Z3RPI/fivP6zRyeOn9PQbj13wQW5efPTR++Zxx443SpKioqLMx2rUyH4VryRVrVrVPI6KOqYGDS6Tw+HQqVOn/jc+58yrWrVqHuP/ve7x45nHNptN1arlvK9y1apVtW/fXkVFHcuxX14U2564lzpfYeo777yjgQMHasWKFTp16pQcDoeOHz+uJUuWqF+/fnr//fd9nOlfGzdu1O23364pU6bowIEDSktL09mzZ7VlyxaNGTNGvXv3NgvTl8TERD3wwAMaNWqUNm7cqISEBKWmpurgwYOaOnWqunfvruXLlxf6uQMAAAAAAMDb1x/MVOSmHXI583bfJ5fTpchNO/T1BzNz73yBW7hwvhYsyFxAWatWbd166+2SpLNnz5h9QkLK5HiO4OB/b7J39uxZSdKZM7Ee40NyGR/sMf7f6545k3kcFBSU7X64587Bff3CKNLY/s8//yzK03m59tprz9u58+vxxx/XgAEDcu33ySefaNmyZZKkUaNGebVNnz5dkyZNkiRFRERo8ODBqlGjhvbu3avPPvtMBw4c0IQJE1StWjX17t07y7mjoqL0yCOP6OzZswoODtbgwYPVqlUrJSYmas6cOVqyZIkiIyP1n//8R9OmTZPNljWvf+GFF7RuXeY+IJ07d9Y999yjMmXKaMOGDZowYYISExM1fPhwzZo1SxEREfn+OQEAAAAAACCrE1En9cvi1fke53K69Mvi1erWt+tFs0fuuTZt2qjHHhtq/vn1198yF0empqaaj5cqVSrH8wQFBZrHaWmp/xuf5jE+MMsYT4GBQeax5zj3uXK7fuY5Av83PjWXnrkr0hD3/vvvl2EYRXlKSZJhGPr7779z71hMqlWr5rWk2pdVq1bpp59+kiTdfvvtuvfee82206dP691335UkXXnllZoxY4b5l3rNNdfo5ptvVp8+fbR792699957uu2227J8OvD222/r7Nmz8vPz0+TJk9WsWTOzrX379vr44481btw4bdy4UYsWLVKPHj28xq9evVpLly6VJPXp00ejR48225o1a6b27dvrvvvuU2Jiot544w1NmTIlfz8kAAAAAAAA+LRy4Sqfe+Dmhd1u08+LVumeIT3Pw8xK1tatW3T33XcqISFBkvTII4+pa9fbzHbPla/5ySDdfQs7XpJsNnuhxhdUkW+n4L5zXFH/dyGJj4/XqFGj5HK5VLlyZb388ste7bNnz1ZiYqKkzP113QGuW0hIiBmqnjlzRnPnzvVqj46O1pIlSyRJ3bt39wpw3R599FHVrZu5AbOvAParr76SJJUpU0bDhw/P0u5eHSxl7tu7c+fO3J42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++9XixYtcr12TEyMJk+erF9++UXHjh1TUFCQ6tatq27duql3797y9/fPcbzT6dScOXM0b9487dq1Sw6HQ1WqVFH79u01YMAA1axZM98/DwAAAAAAAABFy3C5XK6SnsSFKCMjQy+//LK+++67bPt07NhRH330kQICArK0vfPOO5o0aZLPcYZh6OGHH9ZTTz2V7bk3btyoRx55RGfPnvXZfuWVV2rSpEmqUKGCz/bExEQNGzZM69at89keHByst99+W507d852DsXh9OlEZWQ4c+0XFhYsPz+70tMzFBubVAwzA/KG2oRVUZuwMuoTVkVtwsqoT1iB3W5T+fKlS3oawEWJ7RQKaPTo0WaAW79+fY0dO1azZs3Se++9p8svv1yS9PPPP2vs2LFZxk6fPt0McCMiIvTuu+9q1qxZGjt2rOrUqSOXy6UJEyZo1qxZPq8dFRVlBrjBwcF64oknNGPGDE2aNEm33HKLJCkyMlL/+c9/5HT6DkBfeOEFM8Dt3LmzPvvsM82cOVPDhw9X6dKllZSUpOHDh2vnzp2F+0EBAAAAAAAAKBRW4hbA+vXr1b9/f0lS8+bN9fnnnys4ONhsT0lJ0X333afIyEjZbDb99NNPqlGjhiTp9OnT6ty5sxITE3XllVdqxowZCgwMNMcmJCSoT58+2r17t0JDQ7VixQqFhIR4Xf/pp5/W999/Lz8/P02dOlXNmjXzav/44481btw4SdJbb72lHj16eLWvXr1aDz30kCSpT58+Gj16tFf7zp07dd999ykxMVGtW7fWlClTCv7DKiRW4uJCR23CqqhNWBn1CauiNmFl1CesgJW4wPnDStwCcAekwcHB+uijj7wCXEkKDAzUE088ISlz39nly5ebbbNnz1ZiYqIkacSIEV4BriSFhISYoeqZM2c0d+5cr/bo6GgtWbJEktS9e/csAa4kPfroo6pbt64k+Qxgv/rqK0lSmTJlNHz48CztERERGjx4sKTMfXtZjQsAAAAAAACUHELcfIqJidGGDRskSffff78qVqzos1/r1q11xx13aMCAAapTp475uDvQrVq1qlq2bOlzbPPmzc0xy5Yt82pbuXKlMjIyJGWGuL7YbDbdcccdkqS///5bhw8fNtsSExP1+++/S5I6deqkMmXK+DxHz549zeNz5wAAAAAAAACg+PiV9AQuNGvXrjX3me3atWu2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aty4cZbxkrRx48Zsx2/fvt3cd/fcOQAAAAAAAAAoHoS4+fTGG29o165dOf43ePBgs/+KFSu0a9curVy50nzspptukiStX79ex44d83mdH3/80dyP1t3frUuXLubxvHnzfI5PSEjQTz/9JElq27at1166NWvW1OWXXy5Jmj9/frb74rrP7efnp44dO/rsAwAAAAAAAOD8IsQtAb1795afn58cDodGjRolh8Ph1R4dHa133nlHUuY2DDfeeKNXe0REhJo1ayZJmjhxonbt2uXV7nK59Nprr+nMmTOSpAEDBmSZQ9++fSVJ+/bt0/jx47O0r1271gxxu3btau7JCwAAAAAAAKB4EeKWgPr166t///6SpN9++0333nuvfvjhB23ZskXTp09Xr169FB0dLcMw9PLLL8vf3z/LOV566SX5+/srMTFR9913nz777DNt2rRJK1as0KBBgzR37lxJmQFsmzZtsozv1auXua3CuHHj9NRTT2n16tXasGGD3nvvPQ0ZMkTp6ekKDQ3VM888cx5/GgAAAAAAAABywo3NSsgzzzyjmJgYLV68WH/99Zeeeuopr3a73a6RI0eqQ4cOPsdffvnleu+99/Tss88qISFB7777bpY+rVu31tixY32Ot9ls+uSTT/TAAw9o9+7d+uGHH/TDDz949QkNDdWnn36qKlWqFPBZAgAAAAAAACgsQtwSYrfb9e677+rmm2/Wt99+q8jISMXHxys0NFStWrXSAw884HUzMl+6dOmiiIgITZ48WWvWrFFMTIz8/f3VqFEj9ezZU7169ZLNlv1i64oVK2rOnDmaMWOGvv/+e+3fv18pKSmqXr26OnTooEGDBik8PLyonzoAAAAAAACAfDBcLperpCcBZOf06URlZPi+8ZqnsLBg+fnZlZ6eodjYpGKYGZA31CasitqElVGfsCpqE1ZGfcIK7HabypcvXdLTAC5K7IkLAAAAAAAAABZGiAsAAAAAAAAAFkaICwAAAAAAAAAWRogLAAAAAAAAABZGiAsAAAAAAAAAFkaICwAAAAAAAAAWRogLAAAAAAAAABZGiAsAAAAAAAAAFkaICwAAAAAAAAAWRogLAAAAAAAAABZGiAsAAAAAAAAAFkaICwAAAAAAAAAW5lfSEwByYrcbyu9nDXY7n03AmqhNWBW1CSujPmFV1CasjPpEScl8Dw/gfDBcLperpCcBAAAAAAAAAPCNj+cAAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwghxAQAAAAAAAMDCCHEBAAAAAAAAwMIIcQEAAAAAAADAwvxKegK4NJw+fVpdu3bVmTNntG3bNpUqVSrbvunp6Zo9e7YWL16sf/75R4mJiQoPD1ebNm00YMAANWjQIMdrPf7441q6dGmucwoPD9eqVat8tqWlpWnatGn6/vvvtW/fPklS1apV1blzZ/Xv318VK1bM9fy4MBRnbUqS0+nU/PnztXjxYu3atUtnz55VaGiomjVrpgEDBqh58+a5jp8zZ47mzZunXbt2yeFwqEqVKmrfvr0GDBigmjVr5vtnAOsqjvrs1KmTjh49mq95tWzZUlOnTs3yOPV56Sju35179+7VlClTtG7dOkVHR8tut6tWrVrq2LGj+vfvr/Lly+c4ntq8tBR3fW7dulVff/21NmzYoFOnTql06dJq3LixevXqpa5du8owjBzHU58Xt8OHD2vq1Kn6/fffdfToUTkcDlWoUEFNmzbVPffco9atW+c4funSpZo1a5YiIyOVlJSkSpUqqVWrVhowYIAiIiJyvf6BAwf0+eefa+3atYqJiVGZMmXUoEED9erVSz169Mi1PnlfBADWYbhcLldJTwIXN6fTqf/85z9avny5JOX4Yjo6OloPP/ywduzY4bPdbrdr5MiR6tu3b7bXu+mmm3To0KFc55VdiHvy5Ek9+OCD2rVrl89xFSpU0Pjx49W0adNcrwFrK+7aPH36tIYOHaqtW7f6bDcMQ48//riGDRvmsz0xMVHDhg3TunXrfLYHBwfr7bffVufOnbOdAy4cxVWfBQlx27Ztqy+++MLrMerz0lHcvztnz56t0aNHy+Fw+GyvWLGiPvnkE1199dU+26nNS0tx1qfL5dLbb7+tyZMnZzuftm3b6qOPPlJISIjPdurz4vbdd9/plVdeUVpaWrZ97rrrLv3f//2f/Py811elp6drxIgRWrRokc9x/v7+GjlypPr06ZPtuZctW6Znn31WKSkpPtuvv/56jRs3TkFBQT7beV8EANZCiIvzyuVy6aWXXtK3335rPpbdi+nExETdfffd2rt3rySpUaNGeuCBB1SvXj1FRUVp+vTp+uOPPyRJzz//vB588EGf52jevLlcLpeGDh2qW265Jdu5+fv7Z1ldkZ6err59+2rLli2SMl9U3X777fL399evv/6qL7/8Ug6HQ+XLl9f8+fMVHh6e758JrKG4azM1NVV33XWXdu/eLUlq166d7r33XlWsWFHbtm3ThAkTdOrUKUnS+++/r1tvvTXLOTxXmXfu3Fn33HOPypQpow0bNmjChAlKTExUYGCgZs2alaeVGbCu4qzPPXv2ZBuOuaWnp+upp57S4cOHFRgYqJkzZ+qKK67w6kN9XhqK+3fnH3/8oQEDBsjpdKpUqVJ64IEHdN111yk1NVU//fSTZs+eLUkKDQ3VwoULff67TG1eOoq7Pj/44AN9+umnkjLD1oEDB6pt27bKyMjQypUrNX36dDkcDjVu3FgzZ85UQEBAlnNQnxevlStXatiwYXK5XCpbtqwGDBigli1bKiAgQDt27NCXX36pgwcPSpIGDhyoF154wWv8m2++aX5g2rJlS3PVa2RkpCZMmKATJ07IZrNp4sSJat++fZbrR0ZGqnfv3nI4HAoLC9OwYcPUpEkTnTp1StOnT9fatWslSbfffrvefffdLON5XwQAFuQCzpP4+HjXY4895mrYsKHXfykpKT77v/POO2afIUOGuFJTU73aMzIyXM8//7yrYcOGriZNmrgOHTqU5RwbNmwwz/Hnn3/me84zZ840x3/22WdZ2tesWeO64oorXA0bNnS9+OKL+T4/rKEkavOjjz4yz/Haa69laT948KDrmmuucTVs2NB14403upxOp1f7qlWrzPEvv/xylvE7duxwNW3a1NWwYUPXgAED8v7DgOWURH3mxvMas2bNytJOfV4aSqI27733XlfDhg1dl19+uc9/17/66ivzGqNHj87STm1eOoq7Pvfs2eOKiIhwNWzY0NWyZUvXzp07s1xj9erVrssvv9zVsGFD16effpqlnfq8eKWnp7s6depk1sf+/fuz9ImPj3fdeeedroYNG7oiIiJc//zzj9n2zz//mLXz8MMPuzIyMrzGRkVFudq1a+dq2LCh6+abb3alp6dnOf8999zjatiwoat58+ZZru90Ol0jRozI8X0T74sAwHq4sRnOi3Xr1unuu+/WsmXLJEk2W86llpGRoW+++UaSFBYWpnfeeSfLagWbzabRo0erQoUKSk1N1UcffZTlPDt37pSU+bX0gqxW+OqrryRJtWvX9rniom3btrrzzjslSfPnz1dsbGy+r4GSVRK1mZycbK6kuOqqq/Tiiy9muU6tWrV03333ScrcO+3cr3a6a7NMmTIaPnx4lvEREREaPHiwJOn33383/7+AC0tJ/e7MydatW82vCnfo0EH33HNPlj7U58WvJGozISFBmzdvliTdcMMNatGiRZbr3H///apRo4Yk6ddff83STm1eGkqiPmfMmCGn0ylJGjlypBo1apTlOtdff735b/vEiROVkJDg1U59Xrw2bNigI0eOSJKGDh2qOnXqZOkTEhKil156SVLmNiCLFy8226ZOnaqMjAzZ7Xa9+OKLWWq6SpUqeuaZZyRJ+/fv1y+//OLVvnXrVnMF7cCBA7Nc3zAMjRw5UqGhoZKkKVOmZJkf74sAwHoIcVHkXnrpJQ0YMMDc+P7uu+/WbbfdluOYv//+W3FxcZKkHj16qEyZMj77BQYGmlskLF++PMtXgN0vbmvWrJnt3mPZ2bt3rznn2267TXa73We/nj17Ssr8itHKlSvzdQ2UrJKqzZ9//llJSUmSpCeeeCLba3Xr1k09e/bUoEGDvN5MJiYm6vfff5eUuX9pdnNw16Yk840sLhwl+bszO06nUy+//LIyMjIUGBhovtn0RH1e/EqqNmNjY+X6365ftWvX9jneMAxza6QTJ054tVGbl4aSqs/169dLygyBc7pejx49JElJSUleHzRQnxe3jRs3msc33HBDtv2uueYaBQcHS5L++ecf8/EVK1ZIkpo2bapatWr5HNu1a1dzL9tza+Onn34yj901eK6QkBB16dJFkrR69WolJyebbbwvAgBrIsRFkXPftKlSpUr68MMP9eqrr2bZqP9cx44dM4+bNGmSY9/69etLynwx7PliR/o3xL388svzPW/3ah8pc9+p7DRp0sQM2Nwv4HFhKKnaXL16taTMPRvbtGmT7fiIiAi9/vrreu6557z2a962bZvS09MlSddee22248PDw80VadTmhackf3dmZ/bs2eaq8IceesisL0/U58WvpGqzUqVK5l3T9+/fn+14981MK1eu7PU4tXlpKKn6dN8Q8sorr8w24PIcL3m/1qQ+L25NmzbVkCFD1KNHD1WtWjXbfi6Xy/ywKjU1VVLmN7LcH0rlVBv+/v666qqrJGWtDXetValSRTVr1sz2HM2bN5ckpaSkmCt3PcdLvC8CACshxEWRK1++vP7zn/9o6dKlOd5YzJPnyobSpUvn2NfzhbL7ZgBS5oox94vrhg0batGiRRo0aJBatWqlxo0bq1OnTho5cqR5A4tzeT6e3SfeUuYLJveLsezOBWsqqdp038wsIiLC6+twCQkJ2rt3b5bVY+dyr4SQsl+N5uauXWrzwlNS9Zmd1NRUjRs3TpJUsWJFn1+llKjPS0FJ1WZgYKBat24tKXOrBM9QwW3BggVmDbpXlLlRm5eGkqpP9zlyG+8ZKLs/cJCoz4td69atNXz4cL311lsKDAzMtt9ff/1lroD19f4ir7URFRVlfuvL8xw5vaeR5BXwetYk74sAwJpy/pgaKIDJkyfnuhfZucLCwszj6OjoHPtGRUWZxydPnjSP9+/fb74I+vLLL7PsO3b06FHNnj1b8+fP1wsvvKB+/fp5tcfExEjK3AOtSpUqOc4hPDxcBw8ezHWusJaSqk33i+Jq1apJyvyK3KRJk7wCCfd+Y/fcc0+WObprU1KOqzkkmXcGjo2NVVpams87YcOaSqo+szNnzhzznAMHDsw2qKA+L34lWZvPP/+8BgwYoDNnzuiBBx7Qgw8+qGuvvVYOh0OrVq3SjBkzJGV+SDZ06FCvsdTmpaGk6jMsLEwxMTEFHk99QpI+//xz87ht27aSClYbUmYt161bVw6Hw9yf1v3aM6/j3XhfBADWxEpcFLn8vpCWpMaNG5vjPPdw8mXVqlXmsefeTZ43e0hISFDz5s315ptvatasWZo0aZL69Okjf39/paena8yYMZo/f77Xed17owUGBub4tThJ5v5T8fHxuT85WEZJ1GZaWpq5MqJMmTJ64403NGzYsCwryg4ePKiXX35ZTz75pPn1SrezZ8+ax7mt+HHXpkR9XmhK6ndndqZNmyYps+buvffebPtRnxe/kqzNiIgIzZw5U507d1ZycrLGjx+vgQMHavDgwZo6daqcTqcefPBBTZs2TeXKlfMaS21eGkqqPt1fY//rr790/PjxbMd73nDKc6Uk9YmlS5dqyZIlkqTq1avrxhtvlFT42nC/p8nLePd+vOeO430RAFgTIS4soVy5cmrfvr0kac2aNV53Z/X03Xff6e+//zb/7Pl1OM8Qd/DgwZo+fbruuOMOXXPNNWrfvr1Gjx6tzz//XP7+/pKkV155xetFUlpamiTlaXWD+2tR7jG4eBW2NhMTE83HfvrpJ3355ZeqXr263n//fW3YsEGbN2/WZ599poYNG0rKfEH/7rvvep3bs85KlSqV43w9v7JHfV78iuJ3py9r1641vxZ59913Z3vDHYn6hG9FWZubNm3Kdk9cl8uln3/+2bxBlCdqE9kpivrs1q2bpMwbOr388stZPoCVMlc2Tpw40fyzZx/q89K2bds2jRgxwvzzyJEjzfcoha2N/Iz3bPccx/siALAmQlxYxtNPP22+kHjuuef03nvv6fDhw3I4HDp8+LDee+89vfTSS143LnG/2JGkRx55RAsWLNBnn32m4cOHmzdD8XTddddpyJAhkjLDtblz55pt7k+ZfY3LTn764sJVmNpMSUkxHzt27JiqVaumb7/9VrfeeqvKlCmj4OBgdejQQTNnzjRvfvL111/r8OHD5jjPFRDUJ85V2N+dvrhX4drtdg0YMCDHvtQnslMUtfnqq6+a+9lff/31mjFjhrZt26Y///xT48aNU/369bV//349/vjjmjlzptdYahM5KWx9dunSRS1atJCUudp24MCB+vPPP5WSkqL4+Hj98MMPuvfeexUbG6uKFStmGU99XroiIyM1ePBgc2X2wIEDzVW4UsFrw60gq9PPvRbviwDAmghxYRmNGjXSu+++q1KlSikjI0MTJ05U586d1bhxY3Xu3FkTJ05U1apV9dZbb5ljPL9CFBwcrIiICHXo0CHHFxF33323ebxu3bos53LfGTYn7mAut0+3cXEoTG2eWyNPP/20+WbOU0hIiJ555hlJmSt1fvzxxyznknKvT8/QmD3zLg2F/d15roSEBPPrwy1btsx1Pz3qE9kpbG0uWbJEU6dOlSTdfvvt+vzzz9W8eXOVKlVKZcuW1U033aRvv/1WV155pVwul8aMGaNdu3b5PBe1iXMVtj5tNps+/PBDNWrUSJL0559/ql+/frr66qvV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+aeWLFmi9PR07d69W6+88orGjx+f7XMbO3asUlNTdccdd6hNmzY6efKkVq9erQ4dOhTqZwYAAACUBMPlcrlKehIAAAAoGQcPHlSXLl0kSQ0bNtSiRYt89ps1a5ZeeuklSdKrr76qu+++W5I0atQofffdd5KkHj166NVXX82y1UFUVJQeeugh7dmzR5L02WefeYWp+/fv16233iqn06nKlStr9uzZPlfZrl69WoMHD5bL5ZLdbtfatWsVGhpqtntupyBJjz32mP7zn//k90cCAAAAWA43NgMAALiE1a5dWy1btpQk7d69Wzt27PDZb968eZKkoKAgde3aVZJ09OhR8/GIiAi9/vrrPveqrVq1qt5++23ZbJkvPT/99FOv9iVLlphbKDzyyCPZbpPQrl07XXXVVZIyt184dOhQts8rKChIgwYNyrYdAAAAuJAQ4gIAAFzievXqZR577nvrtn//fm3evFmSdPPNNyskJESSzO0NJOmuu+6S3W7P9hpXXHGFrr76aknS5s2bdfr0abNt0KBBWrJkiSZNmqRu3brlONeaNWuax8nJydn2a9y4sYKDg3M8FwAAAHChYE9cAACAS9zNN9+sMWPGKCEhQd9//72ee+45r0A2uxuabdq0yTw+deqUuWdudtzhryRt27ZNN9xwgyQpICBAdevWNffZPdfZs2e1a9cubdmyxQyTJWW5AZqnevXq5TgXAAAA4EJCiAsAAHCJCwoK0m233aZZs2bpxIkTWrNmjblnrdPp1MKFCyVJNWrUMLdekDL3unU7d4uE3Jw6dcrn41u3btXvv/+uPXv26PDhwzp06JDXql1POd3aoVy5cvmaDwAAAGBlhLgAAADQXXfdpVmzZkmSFi5caIa469ev17FjxyRJd955pwzDMMckJCQU+Hrnjv3nn380cuRIbd261Wf/0qVLq2XLloqJiVFkZGSu5/e1Ny8AAABwoSLEBQAAgK666io1bNhQu3fv1vLly5WYmKjSpUtrwYIFkiSbzea1lYIkBQYGmsc//PCD6tevX6Br79u3T/fee68Z7IaFhalVq1Zq1KiR6tatq4YNG6pu3bqy2Wx69tln8xTiAgAAABcTbmwGAAAASf/e4CwlJUWrVq1Senq6Vq5cKUm67rrrVK1aNa/+lSpVMo9jYmIKfN2xY8eaAW6vXr3066+/6sMPP9SwYcPUtWtX1a9fXzZb5svWuLi4Al8HAAAAuFAR4gIAAECS1L17d/n7+0uSli9frj///FNnz56VpCyrcCXp6quvNo/XrVuX6/nfeustvfDCCxo3bpyOHj0qSUpLS9Nvv/0mKXNl73//+1+VKlUq23P8/fff5nFOe+ICAAAAFxNCXAAAAEiSypcvr06dOkmSfvnlF/3444+SpDJlyuimm27K0r9Lly7m8axZs7K9AZmUGb5+8cUXmjt3riZMmKDSpUtLks6cOSOn0ylJstvtXls0nGvhwoVeK37T09Pz8ewAAACACxchLgAAAEzuLRUSEhI0Z84cSdKtt97qM1yNiIhQx44dJUmxsbEaNmyYzyA3KipKjz32mLlytnfv3goNDZWUGRy7A93ExERzD95zLV26VKNHj/Z6LDU1Nf9PEAAAALgAcWMzAAAAmNq1a6cqVaro+PHj5kpXd7Dry2uvvaZevXopKipKmzdv1s0336yePXvqyiuvlMPh0I4dOzRnzhwlJSVJkurVq6ennnrKHO/n56c777xT06ZNkyS9+OKL+u2339SiRQuVLl1ax44d0/Lly7V169Ys146Pjy/Kpw4AAABYFiEuAAAATDabTXfeeac+/fRTSVL9+vW99r49V4UKFTRr1iw98cQT2rx5s+Li4jRlyhSffZs3b66PPvpIISEhXo8PHz5cO3fu1IYNG5SRkaGFCxdq4cKFWca3atVK3bt318iRIyVJO3bsKOCzBAAAAC4shLgAAADw0rRpU/PY1w3NzhUeHq5vvvlGK1as0A8//KAtW7bo1KlTysjIUIUKFdSkSRN169ZNN910kwzDyDI+ODhYX331lWbPnq3vv/9eu3btUkJCggIDAxUeHq4rrrhCPXr0ULt27ZSUlKTXXntNSUlJWrJkiZ577jkFBAQU6fMHAAAArMZwcVtfAAAAeHjhhRc0d+5c+fn56ddff1XFihVLekoAAADAJY0bmwEAAMAUFxenJUuWSJJuvPFGAlwAAADAAghxAQAAIElKS0vTSy+9ZN6ErH///iU8IwAAAAASe+ICAABc0tatW6cxY8aoTJky2rdvn86ePStJat++vVq0aFHCswMAAAAgEeICAABc0ipXrqw9e/Z4PRYeHq5XX321hGYEAAAA4FxspwAAAHAJq1atmq688kqVKlVKFSpUUI8ePTRr1iyFh4eX9NQAAAAA/I/hcrlcJT0JAAAAAAAAAIBvrMQFAAAAAAAAAAsjxAUAAAAAAAAACyPEBQAAAAAAAAALI8QFAAAAAAAAAAsjxAUAAAAAAAAACyPEBQAAAAAAAAALI8QFAAAAAAAAAAsjxAUAAAAAAAAACyPEBQAAAAAAAAALI8QFAAAAAAAAAAsjxAUAAAAAAAAACyPEBQAAAAAAAAALI8QFAAAAAAAAAAsjxAUAAAAAAAAACyPEBQAAAAAAAAALI8QFAAAAAAAAAAsjxAUAAAAAAAAAC/t/DRw34NAsvV0AAAAASUVORK5CYII=",
      "text/plain": [
       "<seaborn._core.plot.Plot at 0x24c14830f40>"
      ]
     },
     "execution_count": 57,
     "metadata": {
      "image/png": {
       "height": 378.25,
       "width": 592.025
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Graficar el producto bruto interno promedio en America en funcion del año.\n",
    "gdpAmerica = gapminder[gapminder[\"continent\"].isin([\"Americas\"])]\n",
    "\n",
    "(\n",
    "    so.Plot(gdpAmerica , x = \"year\" , y = \"gdpPercap\", color = \"year\")\n",
    "    .add(so.Dot() , so.Agg(\"mean\"))\n",
    "\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c78f13c7-e53c-4c65-b2a3-8cf948b7cdaf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
